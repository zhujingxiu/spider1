#!/usr/bin/env python
# -*- coding:utf-8 -*-
# _AUTHOR_  : zhujingxiu
# _DATE_    : 2018/10/31

import re
import base64
from fontTools.ttx import TTFont
from io import BytesIO

s = '''
!function(w,d){if(!w.ActiveXObject||d.documentMode>8){d.write("<style>@font-face{font-family:'fangchan-secret';src:url('data:application/font-ttf;charset=utf-8;base64,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') format('truetype')}.strongbox{font-family:'fangchan-secret','Hiragino Sans GB','Microsoft yahei',Arial,sans-serif,'宋体'!important}</style>")}else{d.write("<style>@font-face{font-family:'fangchan-secret';src:url('//fangfe.58.com/sfont/89bf76ca7fcae80626f29a0e59a79f1b.eot')}.strongbox{font-family:'fangchan-secret','Hiragino Sans GB','Microsoft yahei',Arial,sans-serif,'宋体'!important}.strongbox{visibility:hidden}</style>");var i=d.createElement('img');i.onerror=function(){setTimeout(function(){var s=document.createElement('style'),n=document.getElementsByTagName('script')[0];s.type='text/css';s.styleSheet.cssText='.strongbox{visibility:visible!important}';n.parentNode.insertBefore(s,n);},1300)};i.src='//fangfe.58.com/sfont/89bf76ca7fcae80626f29a0e59a79f1b.eot';}}(window,document);
'''


def make_font_file(base64_string: str):
    bin_data = base64.decodebytes(base64_string.encode())
    with open('text.otf', 'wb') as f:
        f.write(bin_data)
    return bin_data


def convert_font_to_xml(bin_data):
    # 由于TTFont接收一个文件类型
    # BytesIO(bin_data) 把二进制数据当作文件来操作
    font = TTFont(BytesIO(bin_data))
    font.saveXML("text.xml")


def get_num(string):
    ret_list = []
    for char in string:
        decode_num = ord(char)
        if decode_num in c:
            num = c[decode_num]
            print('1',num)
            num = int(num[-2:])-1
            print('11',num)
        else:
            num = char
        ret_list.append(num)
    return ret_list


if __name__ == '__main__':
    ret = re.findall("src:url\('data:application\/font-ttf;charset=utf-8;base64,(.*)'\) format", s)
    base64_str = ret[0]
    print(base64_str)
    bin_data = make_font_file(base64_str)
    convert_font_to_xml(bin_data)
    # 获取对应关系
    font = TTFont(BytesIO(make_font_file(base64_str)))
    uniList = font['cmap'].tables[0].ttFont.getGlyphOrder()
    print(uniList)
    c = font['cmap'].tables[0].ttFont.tables['cmap'].tables[0].cmap

    print('cmap is:::::', c)
    need = ' 麣室驋厅龒卫'
    ret = get_num(need)
    print(ret)


all_stages = [
39,
40,
41,
42,
43,
44,
45,
46,
47,
48,
49,
50,
52,
53,
54,
55,
56,
57,
58,
59,
60,
61,
62,
63,
64,
65,
67,
69,
70,
71,
73,
74,
75,
76,
77,
78,
79,
80,
82,
84,
85,
86,
88,
89,
91,
92,
93,
94,
95,
96,
97,
99,
102,
104,
105,
106,
107,
108,
109,
110,
111,
112,
113,
114,
115,
117,
118,
119,
120,
121,
122,
123,
124,
125,
126,
127,
128,
129,
130,
131,
132,
133,
134,
135,
136,
137,
138,
142,
145,
147,
150,
151,
152,
153,
155,
156,
157,
159,
160,
161,
162,
163,
164,
166,
167,
170,
171,
172,
173,
174,
175,
177,
179,
180,
181,
182,
183,
184,
187,
188,
189,
190,
191,
192,
193,
194,
195,
196,
197,
198,
199,
201,
202,
203,
206,
207,
208,
209,
210,
211,
212,
214,
216,
217,
219,
221,
222,
223,
224,
225,
226,
227,
229,
230,
231,
232,
233,
234,
235,
236,
237,
240,
242,
243,
244,
245,
246,
247,
248,
249,
250,
251,
252,
254,
255,
256,
257,
258,
259,
261,
263,
264,
265,
270,
271,
272,
273,
274,
275,
276,
278,
279,
280,
281,
282,
283,
284,
286,
287,
288,
289,
290,
293,
294,
295,
296,
297,
298,
299,
302,
304,
306,
309,
310,
312,
313,
314,
315,
320,
321,
323,
324,
330,
335,
336,
340,
344,
346,
347,
349,
351,
352,
354,
355,
357,
363,
365,
370,
374,
377,
378,
380,
381,
382,
384,
385,
387,
390,
391,
392,
396,
397,
398,
405,
407,
413,
421,
422,
423,
427,
432,
433,
436,
438,
442,
443,
446,
447,
449,
451,
453,
454,
456,
457,
458,
464,
468,
475,
476,
479,
480,
482,
483,
484,
493,
494,
495,
496,
499,
507,
510,
513,
521,
523,
524,
532,
533,
543,
544,
556,
566,
568,
569,
573,
581,
584,
585,
587,
591,
602,
603,
605,
606,
607,
613,
617,
620,
622,
624,
630,
633,
647,
648,
651,
652,
655,
658,
667,
677,
680,
682,
699,
708,
712,
718,
720,
738,
740,
743,
746,
747,
748,
756,
757,
758,
761,
765,
766,
772,
778,
780,
784,
787,
803,
805,
811,
823,
825,
826,
829,
834,
837,
843,
851,
852,
855,
856,
860,
865,
871,
873,
878,
880,
882,
883,
906,
914,
915,
916,
923,
924,
926,
927,
928,
930,
941,
946,
947,
953,
954,
964,
976,
978,
983,
985,
986,
989,
990,
992,
993,
995,
996,
997,
999,
1015,
1018,
1024,
1025,
1033,
1037,
1038,
1048,
1050,
1055,
1056,
1062,
1067,
1072,
1073,
1075,
1078,
1079,
1080,
1086,
1093,
1095,
1107,
1115,
1116,
1124,
1125,
1127,
1139,
1141,
1142,
1153,
1154,
1156,
1164,
1172,
1173,
1174,
1176,
1185,
1188,
1189,
1204,
1206,
1209,
1210,
1230,
1232,
1234,
1243,
1247,
1262,
1264,
1266,
1269,
1271,
1272,
1275,
1287,
1290,
1296,
1299,
1317,
1322,
1325,
1326,
1334,
1343,
1350,
1366,
1367,
1373,
1377,
1383,
1389,
1392,
1399,
1403,
1409,
1421,
1424,
1430,
1441,
1442,
1447,
1450,
1456,
1458,
1460,
1471,
1473,
1482,
1484,
1485,
1492,
1501,
1504,
1506,
1522,
1523,
1527,
1528,
1529,
1530,
1543,
1544,
1557,
1562,
1572,
1574,
1578,
1583,
1591,
1603,
1605,
1607,
1608,
1611,
1616,
1627,
1633,
1634,
1635,
1637,
1646,
1660,
1661,
1665,
1667,
1671,
1674,
1677,
1680,
1685,
1687,
1690,
1699,
1709,
1713,
1718,
1726,
1728,
1730,
1731,
1744,
1745,
1765,
1768,
1782,
1783,
1784,
1786,
1787,
1788,
1791,
1792,
1800,
1805,
1810,
1811,
1821,
1824,
1827,
1828,
1831,
1834,
1847,
1849,
1852,
1853,
1858,
1864,
1873,
1882,
1888,
1892,
1899,
1903,
1904,
1906,
1907,
1916,
1917,
1919,
1923,
1929,
1931,
1940,
1943,
1945,
1948,
1949,
1956,
1960,
1963,
1977,
1988,
1991,
1995,
2002,
2004,
2006,
2010,
2013,
2014,
2015,
2016,
2020,
2022,
2030,
2043,
2044,
2045,
2048,
2052,
2053,
2059,
2068,
2069,
2071,
2072,
2080,
2083,
2086,
2089,
2090,
2093,
2103,
2107,
2110,
2113,
2119,
2126,
2136,
2139,
2145,
2167,
2169,
2171,
2174,
2189,
2190,
2195,
2197,
2198,
2212,
2219,
2223,
2233,
2236,
2237,
2238,
2240,
2249,
2250,
2253,
2258,
2265,
2266,
2271,
2272,
2274,
2275,
2276,
2283,
2284,
2288,
2290,
2298,
2299,
2304,
2309,
2315,
2320,
2324,
2325,
2327,
2328,
2332,
2333,
2335,
2341,
2344,
2352,
2354,
2356,
2362,
2367,
2373,
2377,
2383,
2387,
2394,
2397,
2399,
2409,
2412,
2416,
2419,
2420,
2425,
2426,
2430,
2434,
2438,
2439,
2449,
2452,
2453,
2455,
2458,
2459,
2463,
2467,
2469,
2480,
2485,
2490,
2491,
2498,
2502,
2503,
2511,
2514,
2516,
2519,
2520,
2523,
2526,
2533,
2539,
2540,
2548,
2550,
2554,
2556,
2561,
2562,
2568,
2578,
2585,
2588,
2592,
2593,
2595,
2596,
2598,
2601,
2603,
2608,
2618,
2619,
2620,
2630,
2632,
2634,
2635,
2636,
2637,
2638,
2641,
2642,
2646,
2647,
2652,
2656,
2657,
2668,
2675,
2679,
2680,
2681,
2689,
2690,
2692,
2696,
2703,
2705,
2706,
2717,
2718,
2722,
2730,
2732,
2734,
2740,
2741,
2744,
2750,
2753,
2758,
2761,
2763,
2768,
2779,
2781,
2786,
2788,
2794,
2795,
2796,
2802,
2813,
2815,
2819,
2825,
2829,
2830,
2838,
2842,
2846,
2853,
2855,
2862,
2864,
2865,
2866,
2868,
2874,
2877,
2880,
2883,
2887,
2893,
2899,
2928,
2930,
2933,
2941,
2945,
2950,
2954,
2958,
2959,
2970,
3002,
3007,
3008,
3010,
3013,
3019,
3020,
3024,
3025,
3031,
3043,
3059,
3077,
3078,
3082,
3083,
3088,
3089,
3090,
3091,
3096,
3100,
3103,
3111,
3127,
3134,
3136,
3137,
3138,
3140,
3145,
3147,
3154,
3157,
3167,
3168,
3170,
3171,
3178,
3204,
3216,
3217,
3222,
3228,
3238,
3240,
3261,
3266,
3267,
3269,
3270,
3272,
3273,
3279,
3281,
3284,
3288,
3293,
3303,
]


p_18 = [
1583,
1572,
1506,
1635,
1608,
1689,
1731,
1723,
1787,
1792,
1574,
1824,
1827,
1784,
1646,
1786,
1815,
1612,
1818,
2086,
1821,
2114,
1857,
2274,
2238,
2240,
2191,
1889,
2320,
2340,
2306,
2368,
2382,
2383,
2403,
2399,
2394,
2377,
2324,
2387,
2502,
2434,
2426,
2467,
2412,
2485,
2461,
2475,
2420,
2506,
2373,
2453,
2469,
2388,
2419,
2513,
2645,
2585,
2598,
2634,
2503,
2514,
2520,
2588,
2595,
2630,
2619,
2554,
2531,
2596,
2354,
2636,
2366,
2452,
2703,
2355,
2722,
2750,
2090,
2540,
2507,
2802,
2842,
2779,
2887,
2899,
2880,
2846,
2877,
2706,
2787,
2338,
2647,
2642,
2635,
2898,
2657,
2692,
2764,
2430,
2930,
1726,
2700,
2605,
2108,
2718,
2958,
2799,
2526,
2140,
2632,
2866,
2865,
3002,
2970,
2864,
2796,
2952,
2490,
3008,
3013,
3083,
2955,
2893,
3090,
2853,
2519,
2815,
1831,
3096,
3167,
3138,
3154,
2959,
3111,
3147,
3163,
2618,
2425,
2652,
2677,
3168,
2675,
3178,
2740,
2741,
3103,
3054,
3059,
3074,
2794,
2732,
2855,
2862,
2548,
3078,
2309,
3095,
2931,
3131,
2852,
3153,
2627,
2650,
2738,
2937,
2951,
2940,
2486,
2654,
2860,
2965,
2916,
3037,
2994,
2991,
2610,
3135,
2977,
3110,
2913,
3062,
2980,
3009,
2497,
2676,
3143,
2976,
2811,
2555,
2982,
3058,
2702,
1771,
2685,
2669,
3094,
1946,
1779,
2581,
2816,
2778,
1823,
]
diff = []
for i in p_18:
    if i not in all_stages:
        diff.append(i)

print(diff)